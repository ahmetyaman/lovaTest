{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\lovaTest\\\\lova-angui-spa\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { LanguageWeb } from '../../models/LanguageWeb';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./lang-translation.service\";\nexport class LangTransPipe {\n  constructor(languageTranslationService) {\n    this.languageTranslationService = languageTranslationService;\n    this.languageWeb = new LanguageWeb();\n  }\n\n  _loadData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      (yield _this.languageTranslationService.getLanguages()).subscribe(data => {\n        _this.languageWeb = data;\n      });\n    })();\n  }\n\n  transform(val, defaultLangVal) {\n    this._loadData().then();\n\n    let retVal = '';\n    console.log(JSON.stringify(this.languageWeb)); // let token = this.authService.token;\n    // /**\n    //  * Tokendan gelen dil değişkeni için modeldeki itemi sec.\n    //  */\n    // if (token == null) token = 'tr';\n    // else token = 'es';\n    // let filtText = val.toLocaleLowerCase();\n    // switch (token) {\n    //   case 'tr':\n    //     retVal = this.languageWeb.tr.filter(\n    //       (data) => data.txt_name.toLocaleLowerCase().indexOf(filtText) !== -1\n    //     )[0].txt_lang;\n    //     break;\n    //   case 'en':\n    //     retVal = this.languageWeb.en.filter(\n    //       (data) => data.txt_name.toLocaleLowerCase().indexOf(filtText) !== -1\n    //     )[0].txt_lang;\n    //     break;\n    //   case 'es':\n    //     retVal = this.languageWeb.es.filter(\n    //       (data) => data.txt_name.toLocaleLowerCase().indexOf(filtText) !== -1\n    //     )[0].txt_lang;\n    //     break;\n    //   case 'ch':\n    //     retVal = this.languageWeb.ch.filter(\n    //       (data) => data.txt_name.toLocaleLowerCase().indexOf(filtText) !== -1\n    //     )[0].txt_lang;\n    //     break;\n    // }\n    // if (retVal == '') {\n    //   if (defaultLangVal) {\n    //     /**\n    //      * defaultLangVal  degeri  örneğin tr   default dil olsun  servisten dönen deger\n    //      * boş olduğundan  bu degeri içeri yazalım :)\n    //      */\n    //     let word: LanguageModel = { txt_lang: defaultLangVal, txt_name: val };\n    //     this.languageTranslationService.addWord(word, 'tr');\n    //     this.languageTranslationService.addWord(word, 'es');\n    //     // this.languageTranslationService.addWord(word, 'en');\n    //     // this.languageTranslationService.addWord(word, 'ch');\n    //     retVal = defaultLangVal;\n    //   }\n    // }\n\n    return retVal;\n  }\n\n}\n\nLangTransPipe.ɵfac = function LangTransPipe_Factory(t) {\n  return new (t || LangTransPipe)(i0.ɵɵdirectiveInject(i1.LangTranslationService, 16));\n};\n\nLangTransPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"langTrans\",\n  type: LangTransPipe,\n  pure: true\n});","map":{"version":3,"sources":["C:/lovaTest/lova-angui-spa/src/app/services/globalpipes/langpipe/lang-trans.pipe.ts"],"names":["LanguageWeb","i0","i1","LangTransPipe","constructor","languageTranslationService","languageWeb","_loadData","getLanguages","subscribe","data","transform","val","defaultLangVal","then","retVal","console","log","JSON","stringify","ɵfac","LangTransPipe_Factory","t","ɵɵdirectiveInject","LangTranslationService","ɵpipe","ɵɵdefinePipe","name","type","pure"],"mappings":";AAAA,SAASA,WAAT,QAA4B,0BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,4BAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,0BAAD,EAA6B;AACpC,SAAKA,0BAAL,GAAkCA,0BAAlC;AACA,SAAKC,WAAL,GAAmB,IAAIN,WAAJ,EAAnB;AACH;;AACKO,EAAAA,SAAS,GAAG;AAAA;;AAAA;AACd,aAAO,KAAI,CAACF,0BAAL,CACFG,YADE,EAAP,EAEKC,SAFL,CAEgBC,IAAD,IAAU;AACrB,QAAA,KAAI,CAACJ,WAAL,GAAmBI,IAAnB;AACH,OAJD;AADc;AAMjB;;AACDC,EAAAA,SAAS,CAACC,GAAD,EAAMC,cAAN,EAAsB;AAC3B,SAAKN,SAAL,GAAiBO,IAAjB;;AACA,QAAIC,MAAM,GAAG,EAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAe,KAAKb,WAApB,CAAZ,EAH2B,CAI3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOS,MAAP;AACH;;AA5DsB;;AA8D3BZ,aAAa,CAACiB,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAInB,aAAV,EAAyBF,EAAE,CAACsB,iBAAH,CAAqBrB,EAAE,CAACsB,sBAAxB,EAAgD,EAAhD,CAAzB,CAAP;AAAuF,CAAhJ;;AACArB,aAAa,CAACsB,KAAd,GAAsB,aAAcxB,EAAE,CAACyB,YAAH,CAAgB;AAAEC,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,IAAI,EAAEzB,aAA3B;AAA0C0B,EAAAA,IAAI,EAAE;AAAhD,CAAhB,CAApC","sourcesContent":["import { LanguageWeb } from '../../models/LanguageWeb';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./lang-translation.service\";\r\nexport class LangTransPipe {\r\n    constructor(languageTranslationService) {\r\n        this.languageTranslationService = languageTranslationService;\r\n        this.languageWeb = new LanguageWeb();\r\n    }\r\n    async _loadData() {\r\n        (await this.languageTranslationService\r\n            .getLanguages())\r\n            .subscribe((data) => {\r\n            this.languageWeb = data;\r\n        });\r\n    }\r\n    transform(val, defaultLangVal) {\r\n        this._loadData().then();\r\n        let retVal = '';\r\n        console.log(JSON.stringify(this.languageWeb));\r\n        // let token = this.authService.token;\r\n        // /**\r\n        //  * Tokendan gelen dil değişkeni için modeldeki itemi sec.\r\n        //  */\r\n        // if (token == null) token = 'tr';\r\n        // else token = 'es';\r\n        // let filtText = val.toLocaleLowerCase();\r\n        // switch (token) {\r\n        //   case 'tr':\r\n        //     retVal = this.languageWeb.tr.filter(\r\n        //       (data) => data.txt_name.toLocaleLowerCase().indexOf(filtText) !== -1\r\n        //     )[0].txt_lang;\r\n        //     break;\r\n        //   case 'en':\r\n        //     retVal = this.languageWeb.en.filter(\r\n        //       (data) => data.txt_name.toLocaleLowerCase().indexOf(filtText) !== -1\r\n        //     )[0].txt_lang;\r\n        //     break;\r\n        //   case 'es':\r\n        //     retVal = this.languageWeb.es.filter(\r\n        //       (data) => data.txt_name.toLocaleLowerCase().indexOf(filtText) !== -1\r\n        //     )[0].txt_lang;\r\n        //     break;\r\n        //   case 'ch':\r\n        //     retVal = this.languageWeb.ch.filter(\r\n        //       (data) => data.txt_name.toLocaleLowerCase().indexOf(filtText) !== -1\r\n        //     )[0].txt_lang;\r\n        //     break;\r\n        // }\r\n        // if (retVal == '') {\r\n        //   if (defaultLangVal) {\r\n        //     /**\r\n        //      * defaultLangVal  degeri  örneğin tr   default dil olsun  servisten dönen deger\r\n        //      * boş olduğundan  bu degeri içeri yazalım :)\r\n        //      */\r\n        //     let word: LanguageModel = { txt_lang: defaultLangVal, txt_name: val };\r\n        //     this.languageTranslationService.addWord(word, 'tr');\r\n        //     this.languageTranslationService.addWord(word, 'es');\r\n        //     // this.languageTranslationService.addWord(word, 'en');\r\n        //     // this.languageTranslationService.addWord(word, 'ch');\r\n        //     retVal = defaultLangVal;\r\n        //   }\r\n        // }\r\n        return retVal;\r\n    }\r\n}\r\nLangTransPipe.ɵfac = function LangTransPipe_Factory(t) { return new (t || LangTransPipe)(i0.ɵɵdirectiveInject(i1.LangTranslationService, 16)); };\r\nLangTransPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"langTrans\", type: LangTransPipe, pure: true });\r\n"]},"metadata":{},"sourceType":"module"}