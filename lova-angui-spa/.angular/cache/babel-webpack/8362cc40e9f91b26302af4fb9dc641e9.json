{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\lovaTest\\\\lova-angui-spa\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./lang-translation.service\";\nimport * as i2 from \"../../globalserv/auth.service\";\nexport class LangTransPipe {\n  constructor(languageTranslationService, authService) {\n    this.languageTranslationService = languageTranslationService;\n    this.authService = authService;\n    this._langWeb = [];\n  }\n\n  transform(val, defaultLangVal) {\n    let retVal = '';\n    let token = this.authService.token;\n    token = 'tr';\n    if (token) token = 'es';else token = 'en';\n    return this._translate(token, val, defaultLangVal);\n  }\n\n  _getData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.languageTranslationService.getLanguages().subscribe(data => {\n        _this._langWeb = data;\n      });\n    })();\n  }\n\n  _translate(langType, langKey, defaultVal) {\n    let retVal = '';\n    this._getData().then;\n\n    let selectedLangWeb = this._langWeb.filter(lang => lang.lang_type.toLocaleLowerCase().indexOf(langType) !== -1)[0];\n\n    let selectedWords = selectedLangWeb.words;\n    let findWord = selectedWords.filter(w => w.txt_name.toLocaleLowerCase().indexOf(langKey.toLocaleLowerCase()) !== -1)[0];\n    if (findWord != undefined && findWord != null) retVal = findWord.txt_lang;\n\n    if (retVal == '') {\n      if (defaultVal) {\n        /**\r\n         * defaultLangVal  degeri  örneğin tr   default dil olsun  servisten dönen deger\r\n         * boş olduğundan  bu degeri içeri yazalım :)\r\n         */\n        let word = {\n          txt_lang: defaultVal,\n          txt_name: langKey\n        };\n        this.languageTranslationService.addWord(word, 'tr');\n        this.languageTranslationService.addWord(word, 'es');\n        this.languageTranslationService.addWord(word, 'en');\n        this.languageTranslationService.addWord(word, 'ch');\n        retVal = defaultVal;\n      }\n    }\n\n    return retVal;\n  }\n\n}\n\nLangTransPipe.ɵfac = function LangTransPipe_Factory(t) {\n  return new (t || LangTransPipe)(i0.ɵɵdirectiveInject(i1.LangTranslationService, 16), i0.ɵɵdirectiveInject(i2.AuthService, 16));\n};\n\nLangTransPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"langTrans\",\n  type: LangTransPipe,\n  pure: true\n});","map":{"version":3,"sources":["C:/lovaTest/lova-angui-spa/src/app/services/globalpipes/langpipe/lang-trans.pipe.ts"],"names":["i0","i1","i2","LangTransPipe","constructor","languageTranslationService","authService","_langWeb","transform","val","defaultLangVal","retVal","token","_translate","_getData","getLanguages","subscribe","data","langType","langKey","defaultVal","then","selectedLangWeb","filter","lang","lang_type","toLocaleLowerCase","indexOf","selectedWords","words","findWord","w","txt_name","undefined","txt_lang","word","addWord","ɵfac","LangTransPipe_Factory","t","ɵɵdirectiveInject","LangTranslationService","AuthService","ɵpipe","ɵɵdefinePipe","name","type","pure"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./lang-translation.service\";\r\nimport * as i2 from \"../../globalserv/auth.service\";\r\nexport class LangTransPipe {\r\n    constructor(languageTranslationService, authService) {\r\n        this.languageTranslationService = languageTranslationService;\r\n        this.authService = authService;\r\n        this._langWeb = [];\r\n    }\r\n    transform(val, defaultLangVal) {\r\n        let retVal = '';\r\n        let token = this.authService.token;\r\n        token = 'tr';\r\n        if (token)\r\n            token = 'es';\r\n        else\r\n            token = 'en';\r\n        return this._translate(token, val, defaultLangVal);\r\n    }\r\n    async _getData() {\r\n        this.languageTranslationService.getLanguages().subscribe(data => { this._langWeb = data; });\r\n    }\r\n    _translate(langType, langKey, defaultVal) {\r\n        let retVal = '';\r\n        this._getData().then;\r\n        let selectedLangWeb = this._langWeb.filter((lang) => lang.lang_type.toLocaleLowerCase().indexOf(langType) !== -1)[0];\r\n        let selectedWords = selectedLangWeb.words;\r\n        let findWord = selectedWords.filter((w) => w.txt_name.toLocaleLowerCase()\r\n            .indexOf(langKey.toLocaleLowerCase()) !== -1)[0];\r\n        if (findWord != undefined && findWord != null)\r\n            retVal = findWord.txt_lang;\r\n        if (retVal == '') {\r\n            if (defaultVal) {\r\n                /**\r\n                 * defaultLangVal  degeri  örneğin tr   default dil olsun  servisten dönen deger\r\n                 * boş olduğundan  bu degeri içeri yazalım :)\r\n                 */\r\n                let word = { txt_lang: defaultVal, txt_name: langKey };\r\n                this.languageTranslationService.addWord(word, 'tr');\r\n                this.languageTranslationService.addWord(word, 'es');\r\n                this.languageTranslationService.addWord(word, 'en');\r\n                this.languageTranslationService.addWord(word, 'ch');\r\n                retVal = defaultVal;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\nLangTransPipe.ɵfac = function LangTransPipe_Factory(t) { return new (t || LangTransPipe)(i0.ɵɵdirectiveInject(i1.LangTranslationService, 16), i0.ɵɵdirectiveInject(i2.AuthService, 16)); };\r\nLangTransPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"langTrans\", type: LangTransPipe, pure: true });\r\n"]},"metadata":{},"sourceType":"module"}