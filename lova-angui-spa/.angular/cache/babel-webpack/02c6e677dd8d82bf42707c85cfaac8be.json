{"ast":null,"code":"import { catchError, tap } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { ServConfig } from '../servconfig';\nimport { ErrorHandling } from './errorHandling';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService extends ErrorHandling {\n    constructor(http) {\n      super();\n      this.http = http;\n      this.path = ServConfig.ApiPath + '/users';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json' // 'Authorization':'Token'\n\n        })\n      };\n    }\n\n    getUsers() {\n      return this.http.get(this.path).pipe(tap(data => {\n        return this.tapIntercepter(data);\n      }), catchError(this.handleError));\n    }\n\n    deleteUser(user) {\n      return this.http.delete(this.path + '/' + user.id.toString(), this.httpOptions).pipe(tap(data => {\n        return this.tapIntercepter(data);\n      }), catchError(this.handleError));\n    }\n\n    updateUser(user) {\n      return this.http.put(this.path + '/' + user.id, user, this.httpOptions).pipe(tap(data => {\n        return this.tapIntercepter(data);\n      }), catchError(this.handleError));\n    }\n\n    getUserById(Id) {\n      return this.http.get(this.path + '/' + Id.toString()).pipe(tap(data => {\n        return this.tapIntercepter(data);\n      }), catchError(this.handleError));\n    }\n\n    addUser(user) {\n      return this.http.post(this.path, user, this.httpOptions).pipe(tap(data => {\n        return this.tapIntercepter(data);\n      }), catchError(this.handleError));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}