{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\lovaTest\\\\lova-angui-spa\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { ErrorHandling } from '../../localserv/errorHandling';\nimport { ServConfig } from '../../servconfig';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../globalserv/alertify.service\";\nexport class LangTranslationService extends ErrorHandling {\n  constructor(http, alertifyService) {\n    super();\n    this.http = http;\n    this.alertifyService = alertifyService;\n    this.path = ServConfig.ApiPath + '/languages';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json' // 'Authorization':'Token'\n\n      })\n    };\n  }\n\n  getLanguages() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.http.get(_this.path).pipe(tap(data => {\n        return _this.tapIntercepter(data);\n      }), catchError(_this.handleError));\n    })();\n  }\n\n  addWord(word, langType) {\n    let wordString = langType + ':' + JSON.stringify(word);\n    this.alertifyService.success(' addedd word  :   ' + wordString);\n  }\n\n}\n\nLangTranslationService.ɵfac = function LangTranslationService_Factory(t) {\n  return new (t || LangTranslationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertifyService));\n};\n\nLangTranslationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LangTranslationService,\n  factory: LangTranslationService.ɵfac\n});","map":{"version":3,"sources":["C:/lovaTest/lova-angui-spa/src/app/services/globalpipes/langpipe/lang-translation.service.ts"],"names":["ErrorHandling","ServConfig","HttpHeaders","catchError","tap","i0","i1","i2","LangTranslationService","constructor","http","alertifyService","path","ApiPath","httpOptions","headers","getLanguages","get","pipe","data","tapIntercepter","handleError","addWord","word","langType","wordString","JSON","stringify","success","ɵfac","LangTranslationService_Factory","t","ɵɵinject","HttpClient","AlertifyService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,SAASA,aAAT,QAA8B,+BAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,MAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mCAApB;AACA,OAAO,MAAMC,sBAAN,SAAqCR,aAArC,CAAmD;AACtDS,EAAAA,WAAW,CAACC,IAAD,EAAOC,eAAP,EAAwB;AAC/B;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,IAAL,GAAYX,UAAU,CAACY,OAAX,GAAqB,YAAjC;AACA,SAAKC,WAAL,GAAmB;AACfC,MAAAA,OAAO,EAAE,IAAIb,WAAJ,CAAgB;AACrB,wBAAgB,kBADK,CAErB;;AAFqB,OAAhB;AADM,KAAnB;AAMH;;AACKc,EAAAA,YAAY,GAAG;AAAA;;AAAA;AACjB,aAAO,KAAI,CAACN,IAAL,CAAUO,GAAV,CAAc,KAAI,CAACL,IAAnB,EAAyBM,IAAzB,CAA8Bd,GAAG,CAAEe,IAAD,IAAU;AAC/C,eAAO,KAAI,CAACC,cAAL,CAAoBD,IAApB,CAAP;AACH,OAFuC,CAAjC,EAEHhB,UAAU,CAAC,KAAI,CAACkB,WAAN,CAFP,CAAP;AADiB;AAIpB;;AACDC,EAAAA,OAAO,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACpB,QAAIC,UAAU,GAAGD,QAAQ,GAAG,GAAX,GAAiBE,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAlC;AACA,SAAKZ,eAAL,CAAqBiB,OAArB,CAA6B,uBAAuBH,UAApD;AACH;;AArBqD;;AAuB1DjB,sBAAsB,CAACqB,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,SAAO,KAAKA,CAAC,IAAIvB,sBAAV,EAAkCH,EAAE,CAAC2B,QAAH,CAAY1B,EAAE,CAAC2B,UAAf,CAAlC,EAA8D5B,EAAE,CAAC2B,QAAH,CAAYzB,EAAE,CAAC2B,eAAf,CAA9D,CAAP;AAAwG,CAAnL;;AACA1B,sBAAsB,CAAC2B,KAAvB,GAA+B,aAAc9B,EAAE,CAAC+B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE7B,sBAAT;AAAiC8B,EAAAA,OAAO,EAAE9B,sBAAsB,CAACqB;AAAjE,CAAtB,CAA7C","sourcesContent":["import { ErrorHandling } from '../../localserv/errorHandling';\r\nimport { ServConfig } from '../../servconfig';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { catchError, tap } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../../globalserv/alertify.service\";\r\nexport class LangTranslationService extends ErrorHandling {\r\n    constructor(http, alertifyService) {\r\n        super();\r\n        this.http = http;\r\n        this.alertifyService = alertifyService;\r\n        this.path = ServConfig.ApiPath + '/languages';\r\n        this.httpOptions = {\r\n            headers: new HttpHeaders({\r\n                'Content-Type': 'application/json',\r\n                // 'Authorization':'Token'\r\n            }),\r\n        };\r\n    }\r\n    async getLanguages() {\r\n        return this.http.get(this.path).pipe(tap((data) => {\r\n            return this.tapIntercepter(data);\r\n        }), catchError(this.handleError));\r\n    }\r\n    addWord(word, langType) {\r\n        let wordString = langType + ':' + JSON.stringify(word);\r\n        this.alertifyService.success(' addedd word  :   ' + wordString);\r\n    }\r\n}\r\nLangTranslationService.ɵfac = function LangTranslationService_Factory(t) { return new (t || LangTranslationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertifyService)); };\r\nLangTranslationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LangTranslationService, factory: LangTranslationService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}